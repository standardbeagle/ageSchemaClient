# Product Requirements Document (PRD): Fixing Integration Tests in ageSchemaClient

## 1. Overview

### 1.1 Purpose
This document outlines the requirements for fixing all integration tests in the ageSchemaClient project. The integration tests are currently failing due to various issues related to Apache AGE integration, parameter passing, and query execution.

### 1.2 Background
The ageSchemaClient is a TypeScript library that provides a client for working with Apache AGE, a PostgreSQL extension for graph database functionality. The library includes a query builder, connection management, and schema validation. Integration tests are essential to ensure the library works correctly with a real PostgreSQL database with the AGE extension.

### 1.3 Scope
This PRD covers the requirements for fixing all integration tests in the ageSchemaClient project, including:
- Connection management
- Query execution
- Parameter passing
- Schema loading
- Query building

## 2. Current Issues

### 2.1 Connection Issues
- Some tests fail with connection errors
- Connection pool management is inconsistent across tests
- Search path settings are not consistently applied

### 2.2 Query Execution Issues
- Cypher queries fail with "return row and column definition list do not match" errors
- Some tests try to use missing modules (e.g., analytics, schema-loader)
- Parameter passing to Cypher queries is inconsistent

### 2.3 Data Structure Issues
- Functions returning data for UNWIND are not properly formatted
- Type conversions between PostgreSQL and AGE are inconsistent

### 2.4 Test Setup Issues
- Some tests don't properly clean up after themselves
- Test isolation is not consistent

## 3. Requirements

### 3.1 Connection Management

#### 3.1.1 Connection Pool Configuration
- Ensure all tests use the singleton connection manager from `test-connection-manager.ts`
- Configure the connection pool with proper settings for AGE:
  - Include `ag_catalog` in the search path
  - Set appropriate timeouts and retry settings
  - Configure proper error handling

#### 3.1.2 Connection Lifecycle
- Ensure connections are properly released back to the pool after each test
- Implement proper cleanup in `afterAll` hooks
- Handle connection errors consistently

### 3.2 Query Execution

#### 3.2.1 Cypher Query Execution
- Fix the `executeCypher` method to properly handle AGE's requirements:
  - Load AGE extension before each query
  - Set search path to include `ag_catalog`
  - Use the correct return type specification
  - Handle parameters correctly

#### 3.2.2 Parameter Passing
- Implement a consistent approach for passing parameters to Cypher queries:
  - Use PostgreSQL functions that return `ag_catalog.agtype` for complex parameters
  - Use the temp table approach for arrays of objects
  - Ensure proper type conversion between PostgreSQL and AGE

#### 3.2.3 Query Builder Integration
- Fix the query builder to generate valid Cypher queries for AGE
- Ensure the query builder properly handles parameters
- Implement proper error handling for query builder errors

### 3.3 Test Structure

#### 3.3.1 Test Setup
- Implement a consistent approach for test setup:
  - Create a unique schema for each test run
  - Create a test graph for each test run
  - Set up test data consistently

#### 3.3.2 Test Teardown
- Implement a consistent approach for test teardown:
  - Drop the test graph
  - Drop the test schema
  - Release all connections back to the pool

#### 3.3.3 Test Isolation
- Ensure tests are isolated from each other:
  - Use unique schema names
  - Use unique graph names
  - Clean up after each test

### 3.4 Missing Modules

#### 3.4.1 Analytics Module
- Implement the missing analytics module or remove references to it
- Update tests to use the implemented module or alternative approaches

#### 3.4.2 Schema Loader Module
- Implement the missing schema loader module or remove references to it
- Update tests to use the implemented module or alternative approaches

## 4. Implementation Approach

### 4.1 Fix Base Test Setup
1. Update `base-test.ts` to ensure proper connection management
2. Fix the `setupIntegrationTest` and `teardownIntegrationTest` functions
3. Ensure AGE is properly loaded and configured

### 4.2 Fix Query Execution
1. Update the `executeCypher` method to properly handle AGE's requirements
2. Implement a consistent approach for parameter passing
3. Fix the query builder integration

### 4.3 Fix Individual Tests
1. Fix the org-chart integration test
2. Fix the query-builder tests
3. Fix the parameter-passing tests
4. Fix or remove tests that depend on missing modules

### 4.4 Add Missing Modules
1. Implement the analytics module or remove references to it
2. Implement the schema loader module or remove references to it

## 5. Success Criteria

### 5.1 All Tests Pass
- All integration tests pass without errors
- No skipped tests due to configuration issues
- No warnings about missing modules

### 5.2 Code Quality
- Code follows best practices for TypeScript
- Code is well-documented
- Code is maintainable and extensible

### 5.3 Performance
- Tests run in a reasonable amount of time
- Connection pool is properly managed
- Resources are properly cleaned up
